<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NativeLibraryManager</name>
    </assembly>
    <members>
        <member name="T:NativeLibraryManager.Bitness">
            <summary>
            Process bitness.
            </summary>
        </member>
        <member name="F:NativeLibraryManager.Bitness.x32">
            <summary>
            32-bit process.
            </summary>
        </member>
        <member name="F:NativeLibraryManager.Bitness.x64">
            <summary>
            64-bit process.
            </summary>
        </member>
        <member name="T:NativeLibraryManager.NoBinaryForPlatformException">
            <summary>
            Thrown when there is no binary for current platform and bitness.
            </summary>
        </member>
        <member name="M:NativeLibraryManager.NoBinaryForPlatformException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:NativeLibraryManager.NoBinaryForPlatformException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:NativeLibraryManager.NoBinaryForPlatformException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NativeLibraryManager.NoBinaryForPlatformException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:NativeLibraryManager.UnsupportedPlatformException">
            <summary>
            Thrown when platform is not supported.
            </summary>
        </member>
        <member name="M:NativeLibraryManager.UnsupportedPlatformException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:NativeLibraryManager.UnsupportedPlatformException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:NativeLibraryManager.UnsupportedPlatformException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NativeLibraryManager.UnsupportedPlatformException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:NativeLibraryManager.LibraryFile">
            <summary>
            A class to store the information about native library file.
            </summary>
        </member>
        <member name="M:NativeLibraryManager.LibraryFile.#ctor(System.String,System.Byte[])">
            <summary>
            Ctor.
            </summary>
            <param name="fileName">Filename to use when extracting the library.</param>
            <param name="resource">Library binary.</param>
        </member>
        <member name="P:NativeLibraryManager.LibraryFile.FileName">
            <summary>
            Filename to use when extracting the library.
            </summary>
        </member>
        <member name="P:NativeLibraryManager.LibraryFile.Resource">
            <summary>
            Library binary.
            </summary>
        </member>
        <member name="P:NativeLibraryManager.LibraryFile.CanLoadExplicitly">
             <summary>
             Specifies whether this file is a shared library, which can be loaded explicitly with
             <code>LoadLibraryEx</code> on Windows and <code>dlopen</code> on Linux and MacOs.
            
             Default is <code>True</code>, but explicit loading is disabled by default with
             <see cref="P:NativeLibraryManager.LibraryManager.LoadLibraryExplicit"/>.
            
             Set this to <code>False</code> if this file is not a library, but a supporting file which
             shouldn't be loaded explicitly when <see cref="P:NativeLibraryManager.LibraryManager.LoadLibraryExplicit"/> is <code>True</code>. 
             </summary>
        </member>
        <member name="M:NativeLibraryManager.LibraryFile.GetUnpackPath(System.Reflection.Assembly)">
            <summary>
            Gets the path to which current file will be unpacked.
            </summary>
            <param name="targetAssembly">Target assembly for which to compute the path.</param>
        </member>
        <member name="T:NativeLibraryManager.LibraryItem">
            <summary>
            Library binaries for specified platform and bitness.
            </summary>
        </member>
        <member name="M:NativeLibraryManager.LibraryItem.#ctor(NativeLibraryManager.Platform,NativeLibraryManager.Bitness,NativeLibraryManager.LibraryFile[])">
            <summary>
            Ctor.
            </summary>
            <param name="platform">Binary platform.</param>
            <param name="bitness">Binary bitness.</param>
            <param name="files">A collection of files for this bitness and platform.</param>
        </member>
        <member name="P:NativeLibraryManager.LibraryItem.Files">
            <summary>
            Library files.
            </summary>
        </member>
        <member name="P:NativeLibraryManager.LibraryItem.Platform">
            <summary>
            Platform for which this binary is used.
            </summary>
        </member>
        <member name="P:NativeLibraryManager.LibraryItem.Bitness">
            <summary>
            Bitness for which this binary is used.
            </summary>
        </member>
        <member name="M:NativeLibraryManager.LibraryItem.LoadItem(System.String,System.Boolean)">
            <summary>
            Unpacks the library and directly loads it if on Windows.
            </summary>
            <param name="targetDirectory">Target directory to which library is extracted.</param>
            <param name="loadLibrary">Load library explicitly.</param>
        </member>
        <member name="T:NativeLibraryManager.LibraryManager">
            <summary>
            A class to manage, extract and load native implementations of dependent libraries.
            </summary>
        </member>
        <member name="M:NativeLibraryManager.LibraryManager.#ctor(System.Reflection.Assembly,NativeLibraryManager.LibraryItem[])">
            <summary>
            Creates a new library manager which extracts to environment current directory by default.
            </summary>
            <param name="targetAssembly">Calling assembly.</param>
            <param name="items">Library binaries for different platforms.</param>
        </member>
        <member name="M:NativeLibraryManager.LibraryManager.#ctor(NativeLibraryManager.LibraryItem[])">
            <summary>
            Creates a new library manager which extracts to environment current directory by default.
            </summary>
            <param name="items">Library binaries for different platforms.</param>
        </member>
        <member name="M:NativeLibraryManager.LibraryManager.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,NativeLibraryManager.LibraryItem[])">
            <summary>
            Creates a new library manager which extracts to environment current directory by default.
            </summary>
            <param name="loggerFactory">Logger factory.</param>
            <param name="items">Library binaries for different platforms.</param>
        </member>
        <member name="M:NativeLibraryManager.LibraryManager.#ctor(System.String,Microsoft.Extensions.Logging.ILoggerFactory,NativeLibraryManager.LibraryItem[])">
             <summary>
             Creates a new library manager which extracts to a custom directory.
            
             IMPORTANT! Be sure this directory is discoverable by system library loader. Otherwise, your library won't be loaded.
             </summary>
             <param name="targetDirectory">Target directory to extract the libraries.</param>
             <param name="loggerFactory">Logger factory.</param>
             <param name="items">Library binaries for different platforms.</param>
        </member>
        <member name="P:NativeLibraryManager.LibraryManager.TargetDirectory">
            <summary>
            Target directory to which native libraries will be extracted. Defaults to directory
            in which targetAssembly, passed to <see cref="T:NativeLibraryManager.LibraryManager"/> constructor, resides.
            </summary>
        </member>
        <member name="P:NativeLibraryManager.LibraryManager.LoadLibraryExplicit">
             <summary>
             Defines whether shared libraries will be loaded explicitly. <code>LoadLibraryEx</code> is
             used on Windows and <code>dlopen</code> is used on Linux and MacOs to load libraries
             explicitly.
            
             WARNING! Explicit library loading on MacOs IS USELESS, and your P/Invoke call will fail unless
             library path is discoverable by system library loader.
             </summary>
        </member>
        <member name="M:NativeLibraryManager.LibraryManager.LoadNativeLibrary(System.Boolean)">
            <summary>
            Extract and load native library based on current platform and process bitness.
            Throws an exception if current platform is not supported.
            </summary>
            <param name="loadLibrary">
            Use LoadLibrary API call on Windows to explicitly load library into the process.
            </param>
        </member>
        <member name="M:NativeLibraryManager.LibraryManager.LoadNativeLibrary">
            <summary>
            Extract and load native library based on current platform and process bitness.
            Throws an exception if current platform is not supported.
            </summary>
        </member>
        <member name="M:NativeLibraryManager.LibraryManager.FindItem">
            <summary>
            Finds a library item based on current platform and bitness.
            </summary>
            <returns>Library item based on platform and bitness.</returns>
            <exception cref="T:NativeLibraryManager.NoBinaryForPlatformException"></exception>
        </member>
        <member name="M:NativeLibraryManager.LibraryManager.GetPlatform">
            <summary>
            Gets the platform type.
            </summary>
            <exception cref="T:NativeLibraryManager.UnsupportedPlatformException">Thrown when platform is not supported.</exception>
        </member>
        <member name="T:NativeLibraryManager.PathHelper">
            <summary>
            Contains useful functions to get paths relative to target assembly.
            </summary>
        </member>
        <member name="M:NativeLibraryManager.PathHelper.GetCurrentDirectory(System.Reflection.Assembly)">
            <summary>
            Gets the directory specified assembly is located in.
            If the assembly was loaded from memory, returns environment
            working directory.
            </summary>
            <param name="targetAssembly">Assembly to get the directory from.</param>
        </member>
        <member name="M:NativeLibraryManager.PathHelper.CombineWithCurrentDirectory(System.Reflection.Assembly,System.String)">
            <summary>
            Combines part of the path with assembly's directory.
            </summary>
            <param name="targetAssembly">Assembly to get directory from.</param>
            <param name="fileName">Right-hand part of the path.</param>
        </member>
        <member name="T:NativeLibraryManager.Platform">
            <summary>
            Platform (operating system).
            </summary>
        </member>
        <member name="F:NativeLibraryManager.Platform.Windows">
            <summary>
            Windows platform.
            </summary>
        </member>
        <member name="F:NativeLibraryManager.Platform.Linux">
            <summary>
            Linux platform.
            </summary>
        </member>
        <member name="F:NativeLibraryManager.Platform.MacOs">
            <summary>
            MacOs platform.
            </summary>
        </member>
        <member name="T:NativeLibraryManager.ResourceAccessor">
            <summary>
            A helper class to load resources from an assembly.
            </summary>
        </member>
        <member name="M:NativeLibraryManager.ResourceAccessor.#ctor(System.Reflection.Assembly)">
            <summary>
            Creates a resource accessor for the specified assembly.
            </summary>
        </member>
        <member name="M:NativeLibraryManager.ResourceAccessor.Binary(System.String)">
            <summary>
            Gets a resource with specified name as an array of bytes.
            </summary>
            <param name="name">Resource name with folders separated by dots.</param>
            <exception cref="T:System.InvalidOperationException">
            When resource is not found.
            </exception>
        </member>
    </members>
</doc>
